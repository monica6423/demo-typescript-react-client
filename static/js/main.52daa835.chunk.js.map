{"version":3,"sources":["context/AppReducer.ts","context/apiCalls.ts","context/GlobalState.tsx","page/restaurantPage/RestaurantPage.tsx","page/restaurantTypePage/RestaurantTypePage.tsx","components/layout/Layout.tsx","components/pagination/Pagination.tsx","page/companyListPage/CompanyListPage.tsx","page/companyPage/CompanyPage.tsx","page/companyPage/CompanyEditPage.tsx","components/fieldConfig/FieldConfig.ts","components/form/Form.tsx","components/createNew/CreateNew.tsx","utilities/utilities.ts","components/restaurantRow/RestaurantRow.tsx","components/table/Table.tsx","page/home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appReducer","state","action","type","restaurants","payload","companies","parentCompanies","restaurant","restaurantById","restaurantType","restaurantTypes","companyById","apiHost","process","createCompany","data","fetch","method","headers","body","JSON","stringify","res","json","console","error","createRestaurant","createRestaurantType","fetchRestaurant","fetchRestaurantById","id","initialState","createData","getRestaurant","getRestaurantById","editRestaurant","getRestaurantTypeById","franchiseFee","name","editRestaurantType","getRestaurantsByCompanyId","getCompanies","Promise","resolve","dispatch","getCompanyById","editCompany","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","useEffect","getRestaurantTypes","company","newRestaurant","restaurantTypeId","companyId","map","useCallback","value","Provider","RestaurantPage","params","useParams","navigate","useNavigate","useContext","useState","restaurantData","setRestaurantData","onChangeInput","e","target","onSave","preventDefault","log","className","onChange","Group","status","style","margin","onClick","RestaurantTypePage","restaurantTypeData","position","Layout","title","link","linkTitle","marginLeft","marginRight","to","Pagination","totalPages","currentPage","setCurrentPage","disabled","LeftOutlined","RightOutlined","CompanyListPage","Math","ceil","length","currentData","slice","index","colSpan","CompanyPage","array","parent","find","reduce","accumulator","currentValue","companyData","setCompanyData","parentCompanyId","FieldConfig","key","label","email","phone","FieldConfig2","dropdown","checkbox","cleanFieldData","fields","obj","v","Form","formType","fieldData","setFieldData","fieldConfig","setFieldConfig","fieldKey","setFieldKey","fieldObj","Object","keys","handleChange","uuidv4","handleSelect","optionArray","mapToOption","item","renderInputField","inputField","field","defaultValue","width","options","placeholder","onSubmitFields","CreateNew","open","setOpen","setFormType","searchTerm","setSearchTerm","renderForm","fetchData","debounceHandler","useMemo","fn","timer","delay","args","clearTimeout","setTimeout","debounce","onSearch","RestaurantRow","Table","restaurantArray","setRestaurantArray","HomePage","AppRoute","useRoutes","path","element","Home","CompanyEditPage","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52daa835.chunk.js","sourcesContent":["import { Restaurant, Company, RestaurantStatus } from \"../interfaces/\";\n\n// Exports a default function called \"appReducer\" which takes in a \"state\" and an \"action\" as arguments.\n// The function uses a switch statement to handle different action types, updating the state accordingly and returning the new state.\nexport type Action =\n  | {\n      type: \"FETCH_RESTAURANTS\";\n      payload: Restaurant[];\n    }\n  | {\n      type: \"FETCH_COMPANIES\";\n      payload: Company[];\n    }\n  | {\n      type: \"FETCH_PARENT_COMPANIES\";\n      payload: Company[];\n    }\n  | {\n      type: \"FETCH_STATION_BY_ID\";\n      payload: Restaurant;\n    }\n  | {\n      type: \"FETCH_RESTAURANTS_BY_COMPANY_ID\";\n      payload: Restaurant[];\n    }\n  | {\n      type: \"FETCH_RESTAURANT_TYPE_BY_ID\";\n      payload: Restaurant;\n    }\n  | {\n      type: \"FETCH_RESTAURANT_TYPES\";\n      payload: RestaurantStatus[];\n    }\n  | {\n      type: \"FETCH_COMPANY_BY_ID\";\n      payload: Company;\n    }\n  | {\n      type: \"ADD_RESTAURANT\";\n      payload: Restaurant;\n    }\n  | {\n      type: \"ADD_COMPANY\";\n      payload: Company;\n    };\n\nconst appReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"FETCH_RESTAURANTS\":\n      return {\n        ...state,\n        restaurants: [...action.payload],\n      };\n    case \"FETCH_COMPANIES\":\n      return {\n        ...state,\n        companies: [...action.payload],\n      };\n    case \"FETCH_PARENT_COMPANIES\":\n      return {\n        ...state,\n        parentCompanies: [...action.payload],\n      };\n    case \"FETCH_STATION_BY_ID\":\n      return {\n        ...state,\n        restaurant: action.payload,\n      };\n    case \"FETCH_RESTAURANTS_BY_COMPANY_ID\":\n      return {\n        ...state,\n        restaurantById: action.payload,\n      };\n    case \"FETCH_RESTAURANT_TYPE_BY_ID\":\n      return {\n        ...state,\n        restaurantType: action.payload,\n      };\n    case \"FETCH_RESTAURANT_TYPES\":\n      return {\n        ...state,\n        restaurantTypes: action.payload,\n      };\n    case \"FETCH_COMPANY_BY_ID\":\n      return {\n        ...state,\n        companyById: action.payload,\n      };\n    case \"ADD_RESTAURANT\":\n      return {\n        ...state,\n        restaurants: [action.payload, ...state.restaurants],\n      };\n    case \"ADD_COMPANY\":\n      return {\n        ...state,\n        companies: [action.payload, ...state.companies],\n      };\n    case \"ADD_RESTAURANT_TYPES\":\n      return {\n        ...state,\n        restaurantTypes: [action.payload, ...state.restaurantTypes],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","import { Restaurant, Company, RestaurantType } from \"../interfaces/\";\nconst apiHost = process.env.REACT_APP_API_HOST;\n\nexport const createCompany = async (data: Company) => {\n  try {\n    const res = await fetch(`${apiHost}create-company`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return res.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const createRestaurant = async (data: Restaurant) => {\n  try {\n    const res = await fetch(`${apiHost}create-restaurant`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return res.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const createRestaurantType = async (data: RestaurantType) => {\n  try {\n    const res = await fetch(`${apiHost}create-restaurant-type`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return res.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const fetchRestaurant = async () => {\n  try {\n    const res = await fetch(`${apiHost}get-restaurants`);\n    return await res.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const fetchRestaurantById = async (id: string) => {\n  try {\n    const res = await fetch(`${apiHost}get-restaurant?id=${id}`);\n    return await res.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","import React, {\n  createContext,\n  useReducer,\n  ReactElement,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport AppReducer, { Action } from \"./AppReducer\";\nimport {\n  Restaurant,\n  Company,\n  RestaurantByCompany,\n  RestaurantType,\n} from \"../interfaces/\";\nimport {\n  createCompany,\n  createRestaurant,\n  createRestaurantType,\n  fetchRestaurant,\n  fetchRestaurantById,\n} from \"./apiCalls\";\n\nconst apiHost = process.env.REACT_APP_API_HOST;\n\ninterface InitialState {\n  restaurants: Restaurant[] | [];\n  restaurant: Restaurant | null;\n  createData: (\n    type: string,\n    data: Company | Restaurant | RestaurantType\n  ) => void;\n  getRestaurant: () => void;\n  getRestaurantById: (id: string) => void;\n  editRestaurant: (restaurant: Restaurant) => void;\n  getRestaurantTypeById: (id: string) => void;\n  restaurantType: RestaurantType;\n  editRestaurantType: (data: RestaurantType) => void;\n  companies: Company[];\n  parentCompanies: Company[];\n  getRestaurantsByCompanyId: (id: string) => void;\n  restaurantById: RestaurantByCompany[];\n  restaurantTypes: RestaurantType[] | [];\n  getCompanies: (value: boolean) => Promise<void>;\n  dispatch: React.Dispatch<Action>;\n  getCompanyById: (id: string) => void;\n  companyById: Company[];\n  editCompany: (data: Company) => void;\n}\n// Initial state\nconst initialState: InitialState = {\n  restaurants: [],\n  restaurant: null,\n  createData: () => {},\n  getRestaurant: () => {},\n  getRestaurantById: () => {},\n  editRestaurant: () => {},\n  getRestaurantTypeById: () => {},\n  restaurantType: { id: \"\", franchiseFee: 0, name: \"\" },\n  editRestaurantType: () => {},\n  companies: [],\n  parentCompanies: [],\n  getRestaurantsByCompanyId: () => {},\n  restaurantById: [],\n  restaurantTypes: [],\n  getCompanies: () => {\n    return Promise.resolve();\n  },\n  dispatch: () => {},\n  getCompanyById: () => {},\n  companyById: [],\n  editCompany: () => {},\n};\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\ninterface GlobalProviderProps {\n  children?: ReactElement[] | ReactElement;\n}\nexport const GlobalProvider = ({ children }: GlobalProviderProps) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  useEffect(() => {\n    getRestaurant();\n    getCompanies(true);\n    getCompanies();\n    getRestaurantTypes();\n  }, []);\n\n  // Actions\n  const createData = async (\n    type: string,\n    data: Company | Restaurant | RestaurantType\n  ) => {\n    switch (type) {\n      case \"company\":\n        const company = await createCompany(data as Company);\n        dispatch({\n          type: \"ADD_COMPANY\",\n          payload: company,\n        });\n        break;\n      case \"restaurant\":\n        const restaurant = await createRestaurant(data as Restaurant);\n        const newRestaurant = {\n          restaurant: restaurant.name,\n          company: restaurant.company.name,\n          restaurantType: restaurant.restaurantType.name,\n          restaurantTypeId: restaurant.restaurantType.id,\n          id: restaurant.id,\n          companyId: restaurant.company.id,\n        };\n        dispatch({\n          type: \"ADD_RESTAURANT\",\n          payload: newRestaurant,\n        });\n        break;\n      case \"restaurantType\":\n        const restaurantType = await createRestaurantType(\n          data as RestaurantType\n        );\n        dispatch({\n          type: \"ADD_RESTAURANT_TYPES\",\n          payload: restaurantType,\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getRestaurant = async () => {\n    const data = await fetchRestaurant();\n    const restaurants = data.map((restaurant: any) => ({\n      restaurant: restaurant.name,\n      company: restaurant.company.name,\n      restaurantType: restaurant.restaurantType.name,\n      restaurantTypeId: restaurant.restaurantType.id,\n      id: restaurant.id,\n      companyId: restaurant.company.id,\n    }));\n    dispatch({\n      type: \"FETCH_RESTAURANTS\",\n      payload: restaurants,\n    });\n  };\n\n  const getRestaurantById = useCallback(async (id: string) => {\n    const data = await fetchRestaurantById(id);\n    dispatch({\n      type: \"FETCH_STATION_BY_ID\",\n      payload: data,\n    });\n  }, []);\n\n  const getRestaurantTypes = async () => {\n    const res = await fetch(`${apiHost}get-restaurant-type`);\n    const data = await res.json();\n    dispatch({\n      type: \"FETCH_RESTAURANT_TYPES\",\n      payload: data,\n    });\n  };\n\n  const getRestaurantTypeById = useCallback(async (id: string) => {\n    const res = await fetch(`${apiHost}get-restaurant-type?id=${id}`);\n    const data = await res.json();\n    dispatch({\n      type: \"FETCH_RESTAURANT_TYPE_BY_ID\",\n      payload: data,\n    });\n  }, []);\n\n  const editRestaurant = async (restaurant: Restaurant) => {\n    await fetch(`${apiHost}create-restaurant`, {\n      method: \"post\",\n      body: JSON.stringify(restaurant),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  };\n\n  const editRestaurantType = async (data: any) => {\n    await fetch(`${apiHost}create-restaurant-type`, {\n      method: \"post\",\n      body: JSON.stringify(data),\n    });\n  };\n\n  const editCompany = async (data: any) => {\n    await fetch(`${apiHost}create-company`, {\n      method: \"post\",\n      body: JSON.stringify(data),\n    });\n  };\n\n  const getCompanies = async (value = false) => {\n    const res = await fetch(`${apiHost}get-companies?parent=${value}`);\n    const data = await res.json();\n    if (value) {\n      dispatch({\n        type: \"FETCH_PARENT_COMPANIES\",\n        payload: data,\n      });\n    }\n    dispatch({\n      type: \"FETCH_COMPANIES\",\n      payload: data,\n    });\n  };\n\n  const getRestaurantsByCompanyId = useCallback(async (id: string) => {\n    const res = await fetch(`${apiHost}get-restaurants-by-companyId?id=${id}`);\n    const data = await res.json();\n    dispatch({\n      type: \"FETCH_RESTAURANTS_BY_COMPANY_ID\",\n      payload: data,\n    });\n  }, []);\n\n  const getCompanyById = useCallback(async (id: string) => {\n    const res = await fetch(`${apiHost}get-company-by-id?id=${id}`);\n    const data = await res.json();\n    dispatch({\n      type: \"FETCH_COMPANY_BY_ID\",\n      payload: data[0],\n    });\n  }, []);\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        restaurants: state.restaurants,\n        restaurant: state.restaurant,\n        createData,\n        getRestaurant,\n        getRestaurantById,\n        editRestaurant,\n        getRestaurantTypeById,\n        restaurantType: state.restaurantType,\n        editRestaurantType,\n        companies: state.companies,\n        parentCompanies: state.parentCompanies,\n        getRestaurantsByCompanyId,\n        restaurantById: state.restaurantById,\n        restaurantTypes: state.restaurantTypes,\n        getCompanies,\n        getCompanyById,\n        companyById: state.companyById,\n        editCompany,\n        dispatch,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState, ChangeEvent } from \"react\";\nimport \"./RestaurantPage.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Radio } from \"antd\";\nimport type { RadioChangeEvent } from \"antd\";\n\nconst RestaurantPage = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const { getRestaurantById, restaurant, editRestaurant, getRestaurant } =\n    useContext(GlobalContext);\n  const [restaurantData, setRestaurantData] = useState(restaurant) as any;\n\n  const onChangeInput = (\n    e: ChangeEvent<HTMLInputElement> | RadioChangeEvent\n  ) => {\n    e.target.name &&\n      setRestaurantData({\n        ...restaurantData,\n        [e.target.name]: e.target.value,\n      });\n  };\n\n  useEffect(() => {\n    params.id && getRestaurantById(params.id);\n  }, [params, getRestaurantById]);\n\n  useEffect(() => {\n    setRestaurantData(restaurant);\n  }, [restaurant]);\n\n  const onSave = async (e: any) => {\n    e.preventDefault();\n    console.log(\"e.tartget,\");\n    restaurantData && (await editRestaurant(restaurantData));\n    getRestaurant();\n    navigate(\"/\");\n  };\n  return restaurantData ? (\n    <div>\n      <tbody className=\"editPage\">\n        <tr className=\"list\">\n          <td>\n            <div>Id</div>\n          </td>\n          <td>\n            <div>Name</div>\n          </td>\n          <td>\n            <div>CompanyId</div>\n          </td>\n          <td>\n            <div>RestaurantTypeId</div>\n          </td>\n          <td>\n            <div>Status</div>\n          </td>\n        </tr>\n        <tr className=\"list\" key={restaurantData.id}>\n          <td>\n            <div id={`${restaurantData.id}`}>{restaurantData.id}</div>\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={restaurantData.name}\n              onChange={(e) => onChangeInput(e)}\n            ></input>\n          </td>\n          <td>\n            <div>{restaurantData.companyId}</div>\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"restaurantTypeId\"\n              value={restaurantData!.restaurantTypeId}\n              onChange={(e) => onChangeInput(e)}\n            ></input>\n          </td>\n          <td>\n            <Radio.Group\n              onChange={onChangeInput}\n              value={restaurantData!.status}\n              name=\"status\"\n            >\n              <Radio value={\"Available\"}>Available</Radio>\n              <Radio value={\"TemporaryClose\"}>TemporaryClose</Radio>\n            </Radio.Group>\n          </td>\n        </tr>\n      </tbody>\n      <div className=\"button-cell\" style={{ margin: \"auto\" }}>\n        <>\n          <button\n            className=\"button cancel-button\"\n            onClick={() => navigate(\"/\")}\n          >\n            Cancel\n          </button>\n          <button className=\"button save-button\" onClick={(e) => onSave(e)}>\n            Save\n          </button>\n        </>\n      </div>\n    </div>\n  ) : (\n    <>loading</>\n  );\n};\n\nexport default RestaurantPage;\n","import { useContext, useEffect, useState, ChangeEvent } from \"react\";\nimport \"./RestaurantTypePage.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst RestaurantTypePage = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const {\n    getRestaurantTypeById,\n    restaurantType,\n    editRestaurantType,\n    getRestaurant,\n  } = useContext(GlobalContext);\n  const [restaurantTypeData, setRestaurantData] = useState(restaurantType);\n\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setRestaurantData({\n      ...restaurantTypeData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  useEffect(() => {\n    params.id && getRestaurantTypeById(params.id);\n  }, [params, getRestaurantTypeById]);\n\n  useEffect(() => {\n    setRestaurantData(restaurantType);\n  }, [restaurantType]);\n\n  const onSave = async (e: any) => {\n    e.preventDefault();\n    restaurantTypeData && (await editRestaurantType(restaurantTypeData));\n    navigate(\"/\");\n    getRestaurant();\n  };\n\n  return restaurantTypeData ? (\n    <div style={{ position: \"relative\" }}>\n      <tbody className=\"editPage\">\n        <tr className=\"list\">\n          <td>\n            <div>Id</div>\n          </td>\n          <td>\n            <div>Name</div>\n          </td>\n          <td>\n            <div>Franchise Fee</div>\n          </td>\n        </tr>\n        <tr className=\"list\" key={restaurantTypeData.id}>\n          <td>\n            <div id={`${restaurantTypeData.id}`}>{restaurantTypeData.id}</div>\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={restaurantTypeData.name}\n              onChange={(e) => onChangeInput(e)}\n            ></input>\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"franchiseFee\"\n              value={restaurantTypeData.franchiseFee}\n              onChange={(e) => onChangeInput(e)}\n            ></input>\n          </td>\n        </tr>\n      </tbody>\n      <div className=\"button-cell\" style={{ margin: \"auto\" }}>\n        <>\n          <button\n            className=\"button cancel-button\"\n            onClick={() => navigate(\"/\")}\n          >\n            Cancel\n          </button>\n          <button className=\"button save-button\" onClick={(e) => onSave(e)}>\n            Save\n          </button>\n        </>\n      </div>\n    </div>\n  ) : (\n    <>loading</>\n  );\n};\n\nexport default RestaurantTypePage;\n","import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Layout.scss\";\n\nexport interface LayoutProps {\n  children?: ReactElement[] | ReactElement;\n  title: string;\n  link: string;\n  linkTitle: string;\n}\n\nconst Layout = ({ children, title, link, linkTitle }: LayoutProps) => {\n  return (\n    <div className=\"page\">\n      <div>\n        <div className=\"header\">\n          <div className=\"logo\">\n            <h1>{title}</h1>\n            <h3 style={{ marginLeft: \"auto\", marginRight: \"1rem\" }}>\n              <Link to={link}>Visit {linkTitle} ➜ </Link>\n            </h3>\n          </div>\n        </div>\n        <div className=\"container\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport \"./Pagination.scss\";\ninterface PaginationProps {\n  totalPages: number;\n  currentPage: number;\n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst Pagination = ({\n  totalPages,\n  currentPage,\n  setCurrentPage,\n}: PaginationProps) => {\n  const handlePreviousClick = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextClick = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  return (\n    <div className=\"pagination\">\n      <button\n        className=\"pagination-button previous-button\"\n        data-testid=\"previous-button\"\n        onClick={handlePreviousClick}\n        disabled={currentPage === 1}\n      >\n        <LeftOutlined />\n      </button>\n      <div className=\"current-page\" data-testid=\"current-page\">\n        Page {currentPage} / {totalPages}\n      </div>\n      <button\n        className=\"pagination-button next-button\"\n        data-testid=\"next-button\"\n        onClick={handleNextClick}\n        disabled={currentPage === totalPages}\n      >\n        <RightOutlined />\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import { useContext, useState } from \"react\";\nimport Layout from \"../../components/layout/Layout\";\nimport \"./CompanyListPage.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"../../components/pagination/Pagination\";\n\nconst CompanyListPage = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const { parentCompanies } = useContext(GlobalContext);\n\n  const itemsPerPage = 6;\n  const totalPages = Math.ceil(parentCompanies.length / itemsPerPage);\n  const currentData = parentCompanies.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n  return (\n    <Layout title=\"Company List\" link=\"/\" linkTitle=\"home\">\n      <table>\n        <thead>\n          <tr className=\"list\">\n            <td>\n              <div>Company Id</div>\n            </td>\n            <td>\n              <div>Company name</div>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          {currentData.map((company, index) => {\n            return (\n              <tr className=\"list\">\n                <td>\n                  <div>\n                    <Link to={`/company-list/${company.id}`}>{company.id}</Link>\n                  </div>\n                </td>\n                <td>\n                  <div>{company.name}</div>\n                </td>\n              </tr>\n            );\n          })}\n          <tr>\n            <td colSpan={3}>\n              <Pagination\n                totalPages={totalPages}\n                currentPage={currentPage}\n                setCurrentPage={setCurrentPage}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Layout>\n  );\n};\n\nexport default CompanyListPage;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport \"./CompanyPage.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { useParams } from \"react-router-dom\";\nimport { RestaurantByCompany } from \"../../interfaces\";\n\nconst CompanyPage = () => {\n  const params = useParams();\n\n  const { getRestaurantsByCompanyId, restaurantById } =\n    useContext(GlobalContext);\n  const [restaurantData, setRestaurantData] =\n    useState<RestaurantByCompany[]>(restaurantById);\n\n  useEffect(() => {\n    params.id && getRestaurantsByCompanyId(params.id);\n  }, [params, getRestaurantsByCompanyId]);\n\n  useEffect(() => {\n    setRestaurantData(restaurantById);\n  }, [restaurantById]);\n\n  const parent = restaurantData.find(\n    (restaurantData: RestaurantByCompany) =>\n      restaurantData.companyId === params.id\n  );\n\n  const sum = (array: any) => {\n    return array.reduce(\n      (accumulator: any, currentValue: any) =>\n        accumulator + currentValue.restaurantType.franchiseFee,\n      0\n    );\n  };\n\n  return restaurantData ? (\n    <div style={{ marginLeft: \"3rem\" }}>\n      <h2>{parent ? parent.name : \"\"}</h2>\n      <thead>\n        <tr>\n          <td>Restaurant Name (incl. child company's restaurant)</td>\n          <td>Franchise Fee</td>\n          <td>State</td>\n        </tr>\n      </thead>\n      {restaurantData.map((restaurant: RestaurantByCompany) => {\n        return (\n          <>\n            <tbody>\n              <tr>\n                <td>{restaurant.name}</td>\n                <td>{restaurant.restaurantType.franchiseFee}</td>\n                <td>{restaurant.status}</td>\n              </tr>\n            </tbody>\n          </>\n        );\n      })}\n      <div>Total Franchise Fee: {sum(restaurantData)}</div>\n    </div>\n  ) : (\n    <>loading</>\n  );\n};\n\nexport default CompanyPage;\n","import React, { useContext, useEffect, useState, ChangeEvent } from \"react\";\nimport \"./CompanyPage.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst CompanyPage = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const { getCompanyById, companyById, editCompany } =\n    useContext(GlobalContext);\n  const [companyData, setCompanyData] = useState(companyById) as any;\n  useEffect(() => {\n    params.id && getCompanyById(params.id);\n  }, [params, getCompanyById]);\n\n  useEffect(() => {\n    setCompanyData(companyById);\n  }, [companyById]);\n\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setCompanyData({\n      ...companyData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSave = async (e: any) => {\n    e.preventDefault();\n    companyData && (await editCompany(companyData));\n    navigate(\"/\");\n  };\n\n  return companyData ? (\n    <div>\n      <tbody className=\"editPage\">\n        <tr className=\"list\">\n          <td>\n            <div>Id</div>\n          </td>\n          <td>\n            <div>Name</div>\n          </td>\n          <td>\n            <div>Parent Company Id</div>\n          </td>\n        </tr>\n        <tr className=\"list\" key={companyData.id}>\n          <td>\n            <div id={`${companyData.id}`}>{companyData.id}</div>\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={companyData.name}\n              onChange={(e) => onChangeInput(e)}\n            ></input>\n          </td>\n          <td>\n            <div>{companyData.parentCompanyId}</div>\n          </td>\n        </tr>\n      </tbody>\n      <div className=\"button-cell\" style={{ margin: \"auto\" }}>\n        <button className=\"button cancel-button\" onClick={() => navigate(\"/\")}>\n          Cancel\n        </button>\n        <button className=\"button save-button\" onClick={(e) => onSave(e)}>\n          Save\n        </button>\n      </div>\n    </div>\n  ) : (\n    <>loading</>\n  );\n};\n\nexport default CompanyPage;\n","export const FieldConfig = {\n  name: { key: \"restaurant\", label: \"Restaurant\" },\n  email: { key: \"restaurantType\", label: \"Restaurant Type\" },\n  phone: { key: \"company\", label: \"Company\" },\n} as { [key: string]: { key: string; label: string } };\n\nexport const FieldConfig2 = {\n  restaurant: {\n    name: { key: \"name\", label: \"Restaurant Name\" },\n    companyId: { key: \"companyId\", label: \"Company Id\", dropdown: \"companies\" },\n    restaurantTypeId: {\n      key: \"restaurantTypeId\",\n      label: \"Restaurant Type Id\",\n      dropdown: \"restaurantTypes\",\n    },\n    status: {\n      key: \"status\",\n      label: \"TemporaryClose/Available\",\n      checkbox: \"status\",\n    },\n  },\n  restaurantType: {\n    name: { key: \"name\", label: \"Restaurant Type\" },\n    franchiseFee: { key: \"franchiseFee\", label: \"FranchiseFee\" },\n  },\n  company: {\n    name: { key: \"name\", label: \"Comapany Name\" },\n    parentCompanyId: {\n      key: \"parentCompanyId\",\n      label: \"Parent Company Id (If this is a parent company, leave it blank)\",\n    },\n  },\n};\n","import {\n  useState,\n  useContext,\n  MouseEvent,\n  ChangeEvent,\n  useEffect,\n} from \"react\";\nimport { Restaurant, RestaurantType, Company } from \"../../interfaces\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./Form.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { FieldConfig2 } from \"../fieldConfig/FieldConfig\";\nimport { Select, Radio } from \"antd\";\nimport type { RadioChangeEvent } from \"antd\";\ninterface FormProps {\n  formType: string | null;\n}\n\ninterface InputField {\n  key: string;\n  label: string;\n  dropdown: string | null;\n  checkbox: string | null;\n}\n\nconst cleanFieldData = (fields: string[]) => {\n  return fields.reduce((obj: any, v: any) => {\n    obj[v] = \"\";\n    return obj;\n  }, {});\n};\n\nconst Form = ({ formType }: FormProps) => {\n  const { createData, companies, restaurantTypes } = useContext(GlobalContext);\n  const [fieldData, setFieldData] = useState<\n    Restaurant | RestaurantType | Company\n  >({} as Restaurant | RestaurantType | Company);\n  const [fieldConfig, setFieldConfig] = useState({});\n  const [fieldKey, setFieldKey] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fieldObj = formType\n      ? FieldConfig2[formType as keyof typeof FieldConfig2]\n      : {};\n    const fields: string[] = formType\n      ? Object.keys(FieldConfig2[formType as keyof typeof FieldConfig2])\n      : [];\n    setFieldConfig(fieldObj);\n    setFieldKey(fields);\n    setFieldData(cleanFieldData(fields));\n  }, [formType]);\n\n  const handleChange = (\n    e: RadioChangeEvent | ChangeEvent<HTMLInputElement>\n  ) => {\n    e.target.name &&\n      setFieldData({\n        ...fieldData,\n        [e.target.name]: e.target.value,\n        id: uuidv4(),\n      });\n  };\n\n  const handleSelect = (value: string, type: string) => {\n    setFieldData({\n      ...fieldData,\n      [type]: value,\n      id: uuidv4(),\n    });\n  };\n\n  const optionArray = (type: string) => {\n    const mapToOption = (array: { id: string; name: string }[]) =>\n      array.map((item) => ({\n        value: item.id,\n        label: item.name,\n      }));\n    if (type === \"companies\") {\n      return mapToOption(companies);\n    }\n    if (type === \"restaurantTypes\") {\n      return mapToOption(restaurantTypes);\n    }\n    return [];\n  };\n\n  const renderInputField = (\n    inputField: InputField,\n    fieldData: any,\n    field: string\n  ) => {\n    if (inputField.dropdown) {\n      return (\n        <div>\n          <Select\n            defaultValue={inputField.key}\n            style={{ width: 180 }}\n            onChange={(value) => handleSelect(value, inputField.key)}\n            options={optionArray(inputField.dropdown)}\n          />\n        </div>\n      );\n    }\n    if (inputField.checkbox) {\n      return (\n        <Radio.Group\n          onChange={handleChange}\n          value={fieldData.status}\n          name={inputField.key}\n        >\n          <Radio value={\"Available\"}>Available</Radio>\n          <Radio value={\"TemporaryClose\"}>TemporaryClose</Radio>\n        </Radio.Group>\n      );\n    }\n    return (\n      <input\n        type=\"text\"\n        name={inputField.key}\n        value={fieldData[field]}\n        onChange={(e) => handleChange(e)}\n        placeholder={inputField.label}\n      ></input>\n    );\n  };\n\n  const onSubmitFields = async (e: MouseEvent) => {\n    e.preventDefault();\n    formType && createData(formType!, fieldData);\n    setFieldData(cleanFieldData(fieldKey));\n  };\n\n  return (\n    <>\n      <tr>\n        {formType &&\n          fieldKey.map((field: string, index: number) => {\n            const inputField = fieldConfig[\n              field as keyof typeof fieldConfig\n            ] as InputField;\n            return (\n              <td key={index}>\n                {renderInputField(inputField, fieldData, field)}\n              </td>\n            );\n          })}\n        <td className=\"button-cell\">\n          {formType && (\n            <button className=\"button\" onClick={(e) => onSubmitFields(e)}>\n              Create\n            </button>\n          )}\n        </td>\n      </tr>\n    </>\n  );\n};\n\nexport default Form;\n","import React, { useState, ChangeEvent, useContext, useMemo } from \"react\";\nimport { debounce } from \"../../utilities/utilities\";\nimport Form from \"../../components/form/Form\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport \"./CreateNew.scss\";\n\nconst CreateNew = () => {\n  const { dispatch } = useContext(GlobalContext);\n  const [open, setOpen] = useState<boolean>(false);\n  const [formType, setFormType] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const renderForm = (type: string) => {\n    setFormType(type);\n  };\n\n  const fetchData = async (value: string) => {\n    const res = await fetch(\n      `http://localhost:3000/dev/api/get-restaurants?searchValue=${value}`\n    );\n    const data = await res.json();\n    const restaurants = data.map((restaurant: any) => ({\n      restaurant: restaurant.name,\n      company: restaurant.company.name,\n      restaurantType: restaurant.restaurantType.name,\n      restaurantTypeId: restaurant.restaurantType.id,\n      id: restaurant.id,\n      companyId: restaurant.company.id,\n    }));\n    dispatch({\n      type: \"FETCH_RESTAURANTS\",\n      payload: restaurants,\n    });\n  };\n\n  //Use useMemo to create a debounced version of the fetchData function and store it in a variable debounceHandler.\n  //This will ensure that a new debounced function is not created on every render\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceHandler = useMemo(() => debounce(fetchData, 1000), []);\n\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n    debounceHandler(e.target.value);\n  };\n\n  return (\n    <div>\n      <div>\n        <div className=\"button-cell \">\n          <button className=\"button main\" onClick={() => setOpen(!open)}>\n            <b>Create new</b>\n          </button>\n          <td className=\"search-box\">\n            <input\n              type=\"text\"\n              name={\"inputField.key\"}\n              value={searchTerm}\n              onChange={(e) => onSearch(e)}\n              placeholder={\"Search by restaurant, company & type\"}\n            ></input>\n          </td>\n        </div>\n        {open && (\n          <div className=\"flex button-cell create-new\">\n            <button\n              className=\"button \"\n              onClick={(e) => renderForm(\"restaurant\")}\n            >\n              Restaurant\n            </button>\n            <button\n              className=\"button \"\n              onClick={(e) => renderForm(\"restaurantType\")}\n            >\n              Restaurant Type\n            </button>\n            <button className=\"button \" onClick={() => renderForm(\"company\")}>\n              Company\n            </button>\n          </div>\n        )}\n      </div>\n      {open && formType && (\n        <table>\n          <tbody>\n            <Form formType={formType} />\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default CreateNew;\n","export const debounce = (fn: any, delay = 300) => {\n  let timer: any;\n  return (...args: string[]) => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      timer = null;\n      fn(...args);\n    }, delay);\n  };\n};\n","import { Restaurant } from \"../../interfaces\";\nimport \"./RestaurantRow.scss\";\nimport { Link } from \"react-router-dom\";\n\ninterface RestaurantRowProps {\n  restaurant?: Restaurant;\n}\nconst RestaurantRow = ({\n  restaurant = {\n    company: \"\",\n    restaurant: \"\",\n    restaurantType: \"\",\n    id: \"\",\n    companyId: \"\",\n  },\n}: RestaurantRowProps) => {\n  return (\n    <tr key={restaurant.id} className=\"list\">\n      <td>\n        <div>\n          <Link to={`/restaurant/${restaurant.id}`}>\n            {restaurant.restaurant}\n          </Link>\n        </div>\n      </td>\n      <td>\n        <div>\n          <Link to={`/restaurant-type/${restaurant.restaurantTypeId}`}>\n            {restaurant.restaurantType}\n          </Link>\n        </div>\n      </td>\n      <td>\n        <div>\n          <Link to={`/company/${restaurant.companyId}`}>\n            {restaurant.company}\n          </Link>\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nexport default RestaurantRow;\n","import { useContext, useState, useEffect } from \"react\";\nimport \"./Table.scss\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { Restaurant } from \"../../interfaces\";\nimport RestauranttRow from \"../restaurantRow/RestaurantRow\";\nimport { FieldConfig } from \"../fieldConfig/FieldConfig\";\nimport Pagination from \"../pagination/Pagination\";\n\nconst Table = () => {\n  const { restaurants } = useContext(GlobalContext) as {\n    restaurants: Restaurant[];\n  };\n  const [restaurantArray, setRestaurantArray] = useState<Restaurant[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n  const totalPages = Math.ceil(restaurantArray.length / itemsPerPage);\n  const currentData = restaurantArray.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  useEffect(() => {\n    setRestaurantArray(restaurants);\n  }, [restaurants]);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {Object.keys(FieldConfig).map((key, id) => {\n            return (\n              <th key={id}>\n                <div>{FieldConfig[key].label}</div>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {currentData.map((restaurant: Restaurant) => {\n          return <RestauranttRow restaurant={restaurant} />;\n        })}\n        <tr>\n          <td colSpan={3}>\n            <Pagination\n              totalPages={totalPages}\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import Layout from \"../../components/layout/Layout\";\n\nimport CreateNew from \"../../components/createNew/CreateNew\";\nimport Table from \"../../components/table/Table\";\n\nconst HomePage = () => {\n  return (\n    <Layout\n      title=\"Carbonara App\"\n      link=\"/company-list\"\n      linkTitle=\"parent compant list\"\n    >\n      <CreateNew />\n      <Table />\n    </Layout>\n  );\n};\n\nexport default HomePage;\n","import \"./App.css\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport { HashRouter, useRoutes } from \"react-router-dom\";\nimport RestaurantPage from \"./page/restaurantPage/RestaurantPage\";\nimport RestaurantTypePage from \"./page/restaurantTypePage/RestaurantTypePage\";\nimport CompanyListPage from \"./page/companyListPage/CompanyListPage\";\nimport CompanyPage from \"./page/companyPage/CompanyPage\";\nimport CompanyEditPage from \"./page/companyPage/CompanyEditPage\";\nimport HomePage from \"./page/home/Home\";\n\nconst AppRoute = () => {\n  let routes = useRoutes([\n    { path: \"/\", element: <HomePage /> },\n    { path: \"restaurant/:id\", element: <RestaurantPage /> },\n    { path: \"restaurant-type/:id\", element: <RestaurantTypePage /> },\n    { path: \"company-list\", element: <CompanyListPage /> },\n    { path: \"company-list/:id\", element: <CompanyPage /> },\n    { path: \"company/:id\", element: <CompanyEditPage /> },\n  ]);\n  return routes;\n};\n\nconst App = () => {\n  return (\n    <HashRouter basename={\"/\"}>\n      <GlobalProvider>\n        <AppRoute />\n      </GlobalProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}